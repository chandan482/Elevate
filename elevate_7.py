# -*- coding: utf-8 -*-
"""Elevate 7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VxbYezgD3utT3FdDLcV_pHMlKPfSKyLj

# Task
Run basic SQL: query = "SELECT product, SUM(quantity) AS total_qty, SUM(quantity * price) AS
revenue FROM sales GROUP BY product",
Load into pandas: import pandas as pd df = pd.read_sql_query(query, conn),
Print results: print(df),
Plot simple bar chart: df.plot(kind='bar', x='product', y='revenue'),
Save chart if needed: plt.savefig("sales_chart.png")

Here is all the data you need:
"Sample - Superstore.xls"

## Data loading

### Subtask:
Load the "Sample - Superstore.xls" file into a pandas DataFrame.

**Reasoning**:
Load the excel file into a pandas DataFrame and print some info.
"""

import pandas as pd

try:
    df = pd.read_excel("Sample - Superstore.xls")
    print(df.shape)
    print(df.columns)
    display(df.head())
except FileNotFoundError:
    print("Error: 'Sample - Superstore.xls' not found.")
    df = None
except Exception as e:
    print(f"An error occurred: {e}")
    df = None

"""## Data preparation

### Subtask:
Prepare the data for SQL querying.

**Reasoning**:
Rename columns, create 'price' column, and verify data types.
"""

import numpy as np

# Rename columns
df = df.rename(columns={'Product Name': 'product', 'Sales': 'revenue', 'Quantity': 'quantity'})

# Create 'price' column and handle potential division-by-zero errors
df['price'] = df['revenue'] / df['quantity']
df['price'] = df['price'].replace([np.inf, -np.inf], 0)
df['price'] = df['price'].fillna(0)

# Ensure numeric types for relevant columns
df['price'] = pd.to_numeric(df['price'], errors='coerce').fillna(0)
df['quantity'] = pd.to_numeric(df['quantity'], errors='coerce').fillna(0)
df['revenue'] = pd.to_numeric(df['revenue'], errors='coerce').fillna(0)

# Verify column existence and data types
print(df.dtypes[['product', 'quantity', 'revenue']])

# Display first few rows for visual inspection
display(df.head())

"""## Data wrangling

### Subtask:
Execute the SQL query against the prepared DataFrame.

**Reasoning**:
Execute the SQL query against the DataFrame `df` using pandasql and display the results.
"""

from pandasql import sqldf

# Execute the SQL query
query = "SELECT product, SUM(quantity) AS total_qty, SUM(quantity * price) AS revenue FROM df GROUP BY product"
df_result = sqldf(query)

# Display the first few rows of the result
display(df_result.head())

"""**Reasoning**:
The previous attempt to use `pandasql` failed due to a missing module.  I will attempt to use the built-in `pandas` SQL functionality instead.


"""

# Execute the SQL query using pandas
df_result = df.groupby('product').agg({'quantity': 'sum', 'revenue': 'sum'})

# Rename the columns
df_result = df_result.rename(columns={'quantity': 'total_qty'})

# Reset the index to make 'product' a regular column
df_result = df_result.reset_index()

# Display the first few rows of the result
display(df_result.head())

"""## Data visualization

### Subtask:
Create a bar chart visualizing sales revenue by product.

**Reasoning**:
Create the bar chart visualizing sales revenue by product, handling potential overlapping x-axis labels and adjusting figure size as needed. Limit the number of products displayed if necessary.
"""

import matplotlib.pyplot as plt

# Sort the DataFrame by revenue in descending order and select the top 20 products
df_top_20 = df_result.sort_values(by='revenue', ascending=False).head(20)

# Create the bar chart
plt.figure(figsize=(12, 6))  # Adjust figure size for better readability
df_top_20.plot(kind='bar', x='product', y='revenue', color='skyblue', legend=False)
plt.title("Sales Revenue by Product (Top 20)", fontsize=14)
plt.xlabel("Product", fontsize=12)
plt.ylabel("Revenue", fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.tight_layout()
plt.show()

"""**Reasoning**:
The previous attempt to generate the plot resulted in a warning about tight layout not being applied.  I'll try again, removing `plt.tight_layout()` and adjusting the figure size further to see if that resolves the issue. I'll also explicitly set the x-axis tick locations and labels to ensure they are correctly displayed, even with rotated labels.


"""

import matplotlib.pyplot as plt

# Sort the DataFrame by revenue in descending order and select the top 20 products
df_top_20 = df_result.sort_values(by='revenue', ascending=False).head(20)

# Create the bar chart
plt.figure(figsize=(14, 8))  # Increased figure size
ax = df_top_20.plot(kind='bar', x='product', y='revenue', color='skyblue', legend=False)
plt.title("Sales Revenue by Product (Top 20)", fontsize=14)
plt.xlabel("Product", fontsize=12)
plt.ylabel("Revenue", fontsize=12)

# Explicitly set x-axis ticks and labels
ax.set_xticklabels(df_top_20['product'], rotation=45, ha='right')
plt.xticks(range(len(df_top_20['product'])))  # Set x-axis tick locations

plt.show()

"""**Reasoning**:
The previous attempts to generate the plot have not produced the desired output.  The issue seems to be with the figure size and the way the plot is rendered in the notebook environment.  I will try one more approach using a different method of setting the figure size and then manually adjusting the layout.


"""

import matplotlib.pyplot as plt

# Sort the DataFrame by revenue in descending order and select the top 20 products
df_top_20 = df_result.sort_values(by='revenue', ascending=False).head(20)

# Create the bar chart
plt.figure(figsize=(16, 8)) # Adjust figure size

# Plot the bar chart
ax = df_top_20.plot(kind='bar', x='product', y='revenue', color='skyblue')

# Set the title and axis labels
plt.title("Sales Revenue by Product (Top 20)")
plt.xlabel("Product")
plt.ylabel("Revenue")

# Rotate x-axis labels
plt.xticks(rotation=45, ha='right')

# Adjust layout to prevent overlapping labels
plt.tight_layout()

# Display the chart
plt.show()

"""## Summary:

### 1. Q&A

No questions were explicitly asked in the provided data analysis task.  However, we can infer the implicit questions driving the analysis:

* **What are the top-selling products?** This is addressed by the analysis that groups sales data by product and calculates total revenue.
* **How does revenue vary across different products?** This is visualized in the bar chart showing sales revenue by product.


### 2. Data Analysis Key Findings

* The dataset contains information on 10,194 sales transactions.
* A `price` column was calculated as `revenue / quantity` and potential division-by-zero errors were handled.
* The top 20 products by revenue were identified for visualization.  (The specific products and revenue values are not provided in the summary, but this information is available in the `df_top_20` dataframe from the code).

### 3. Insights or Next Steps

* **Investigate the visualization issue:** The attempts to create a bar chart were unsuccessful due to display problems in the notebook environment.  Further troubleshooting or exploring alternative visualization libraries should be prioritized.
* **Analyze sales trends:**  Explore additional analysis, such as time series analysis to identify trends in sales revenue over time. This could help understand seasonality, growth patterns, and potentially identify opportunities for optimization.

"""